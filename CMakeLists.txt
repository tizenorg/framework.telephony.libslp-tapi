CMAKE_MINIMUM_REQUIRED(VERSION 2.6)
SET(CMAKE_ALLOW_LOOSE_LOOP_CONSTRUCTS true)

PROJECT(SLP-tapi C)
SET(VERSION 0.0)


### Global setting ###
SET(PREFIX ${CMAKE_INSTALL_PREFIX})
SET(EXEC_PREFIX "\${prefix}")
SET(LIBDIR "\${prefix}/lib")
SET(INCLUDEDIR "\${prefix}/include")

MACRO(GET_TARGET_PROPERTY_WITH_DEFAULT _variable _target _property _default_value)
	GET_TARGET_PROPERTY (${_variable} ${_target} ${_property})
	IF (${_variable} MATCHES NOTFOUND)
		SET (${_variable} ${_default_value})
	ENDIF (${_variable} MATCHES NOTFOUND)
ENDMACRO (GET_TARGET_PROPERTY_WITH_DEFAULT)

MACRO(CREATE_LIBTOOL_FILE _target _install_DIR)
	GET_TARGET_PROPERTY(_target_location ${_target} LOCATION)
	GET_TARGET_PROPERTY_WITH_DEFAULT(_target_static_lib ${_target} STATIC_LIB "")
	GET_TARGET_PROPERTY_WITH_DEFAULT(_target_dependency_libs ${_target} LT_DEPENDENCY_LIBS "")
	GET_TARGET_PROPERTY_WITH_DEFAULT(_target_current ${_target} LT_VERSION_CURRENT 0)
	GET_TARGET_PROPERTY_WITH_DEFAULT(_target_age ${_target} LT_VERSION_AGE 0)
	GET_TARGET_PROPERTY_WITH_DEFAULT(_target_revision ${_target} LT_VERSION_REVISION 0)
	GET_TARGET_PROPERTY_WITH_DEFAULT(_target_installed ${_target} LT_INSTALLED yes)
	GET_TARGET_PROPERTY_WITH_DEFAULT(_target_shouldnotlink ${_target} LT_SHOULDNOTLINK yes)
	GET_TARGET_PROPERTY_WITH_DEFAULT(_target_dlopen ${_target} LT_DLOPEN "")
	GET_TARGET_PROPERTY_WITH_DEFAULT(_target_dlpreopen ${_target} LT_DLPREOPEN "")
	GET_FILENAME_COMPONENT(_laname ${_target_location} NAME_WE)
	GET_FILENAME_COMPONENT(_soname ${_target_location} NAME)
	SET(_laname2 ${_laname}.la)
	SET(_laname ${PROJECT_BINARY_DIR}/${_laname}.la)
	FILE(WRITE ${_laname} "# ${_laname2} - a libtool library file\n")
	FILE(APPEND ${_laname} "# Generated by CMake ${CMAKE_VERSION} (like GNU libtool)\n")
	FILE(APPEND ${_laname} "\n# Please DO NOT delete this file!\n# It is necessary for linking the library with libtool.\n\n" )
	FILE(APPEND ${_laname} "# The name that we can dlopen(3).\n")
	FILE(APPEND ${_laname} "dlname='${_soname}'\n\n")
	FILE(APPEND ${_laname} "# Names of this library.\n")
	FILE(APPEND ${_laname} "library_names='${_soname}.${_target_current}.${_target_age}.${_target_revision} ${_soname}.${_target_current} ${_soname}'\n\n")
	FILE(APPEND ${_laname} "# The name of the static archive.\n")
	FILE(APPEND ${_laname} "old_library='${_target_static_lib}'\n\n")
	FILE(APPEND ${_laname} "# Libraries that this one depends upon.\n")
	FILE(APPEND ${_laname} "dependency_libs='${_target_dependency_libs}'\n\n")
	FILE(APPEND ${_laname} "# Names of additional weak libraries provided by this library\n")
	FILE(APPEND ${_laname} "weak_library_names=\n\n")
	FILE(APPEND ${_laname} "# Version information for ${_laname2}.\n")
	FILE(APPEND ${_laname} "current=${_target_current}\n")
	FILE(APPEND ${_laname} "age=${_target_age}\n")
	FILE(APPEND ${_laname} "revision=${_target_revision}\n\n")
	FILE(APPEND ${_laname} "# Is this an already installed library?\n")
	FILE(APPEND ${_laname} "installed=${_target_installed}\n\n")
	FILE(APPEND ${_laname} "# Should we warn about portability when linking against -modules?\n")
	FILE(APPEND ${_laname} "shouldnotlink=${_target_shouldnotlink}\n\n")
	FILE(APPEND ${_laname} "# Files to dlopen/dlpreopen\n")
	FILE(APPEND ${_laname} "dlopen='${_target_dlopen}'\n")
	FILE(APPEND ${_laname} "dlpreopen='${_target_dlpreopen}'\n\n")
	FILE(APPEND ${_laname} "# Directory that this library needs to be installed in:\n")
	FILE(APPEND ${_laname} "libdir='${CMAKE_INSTALL_PREFIX}${_install_DIR}'\n")
	INSTALL( FILES ${_laname} DESTINATION ${CMAKE_INSTALL_PREFIX}${_install_DIR})
ENDMACRO(CREATE_LIBTOOL_FILE)


# Build type : Release
IF("${CMAKE_BUILD_TYPE}" STREQUAL "")
	SET(CMAKE_BUILD_TYPE "Release")
ENDIF()
MESSAGE("Build type: ${CMAKE_BUILD_TYPE}")


# Set required packages
INCLUDE(FindPkgConfig)
pkg_check_modules(pkgs REQUIRED vconf glib-2.0 dbus-1 dbus-glib-1 gthread-2.0 dlog security-server)

FOREACH(flag ${pkgs_CFLAGS})
	SET(EXTRA_CFLAGS "${EXTRA_CFLAGS} ${flag}")
ENDFOREACH(flag)


# Compiler flags
INCLUDE_DIRECTORIES(${CMAKE_SOURCE_DIR}/include/common
		${CMAKE_SOURCE_DIR}/include/tapi
		${CMAKE_SOURCE_DIR}/include/porting)
SET(EXTRA_CFLAGS "${EXTRA_CFLAGS} -Wl,-zdefs" )
SET(EXTRA_CFLAGS "${EXTRA_CFLAGS} -fvisibility=hidden")
SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${EXTRA_CFLAGS}")
SET(CMAKE_C_FLAGS_DEBUG "-O0 -g")
SET(CMAKE_C_FLAGS_RELEASE "-O2")

SET(CMAKE_SKIP_BUILD_RPATH true)


# Get uname value to set 'TARGET' definition
# TODO: Is this needed?
FIND_PROGRAM(UNAME NAMES uname)
EXEC_PROGRAM("${UNAME}" ARGS "-m" OUTPUT_VARIABLE "ARCH")
IF("${ARCH}" STREQUAL "arm")
	ADD_DEFINITIONS("-DTARGET")
	ADD_DEFINITIONS("-D_TELEPHONY_ARM_ONEDRAM")
	ADD_DEFINITIONS("-D_ARM_TOUCH -DFEATURE_GPS_XTRA")
	MESSAGE("add -DTARGET")
ELSE()
	ADD_DEFINITIONS("-D_SIMUL_TOUCH -DFEATURE_GPS_XTRA")
ENDIF()


ADD_DEFINITIONS("-D_CP_INFINEON_")
#ADD_DEFINITIONS("-D_CP_QUALCOMM_")

ADD_DEFINITIONS("-D_MACHINE_AQUILA_")
ADD_DEFINITIONS("-DPREFIX=\"${CMAKE_INSTALL_PREFIX}\"")

ADD_DEFINITIONS("-DTELEPHONY_TIMER")
ADD_DEFINITIONS("-DFEATURE_TELEPHONY_GPS")
ADD_DEFINITIONS("-D_TAPI_DEBUG_ON_DEBUG_VIEWER_")
ADD_DEFINITIONS("-DLARGE_ICON")
ADD_DEFINITIONS(" -DEXPORT_API=\"__attribute__((visibility(\\\"default\\\")))\" ")


# Linker flags
SET(CMAKE_EXE_LINKER_FLAGS "-Wl,--as-needed")


### Build ###
SET(SRCS
		src/tapi_proxy_common.c
		src/tapi_proxy_network.c
		src/tapi_proxy_sim.c
		src/tapi_proxy_ss.c
		src/tapi_proxy_call.c
		src/tapi_proxy_nettext.c
		src/tapi_proxy_sat.c
		src/common_tapi_lib.c
		src/tapi_proxy_sound.c
		src/tapi_proxy_gprs.c
		src/porting/tel_marshaler.c
		src/common_tapi_lib_internal.c
		src/tapi_proxy_cfg.c
		src/tapi_proxy_productivity.c
		src/tapi_proxy_power.c
		src/tapi_proxy_gps.c
		src/tapi_proxy_omadm.c
		src/tapi_proxy_misc.c
		src/tapi_proxy_data.c
   )

ADD_CUSTOM_TARGET(tapi-lib-proxy.h
		COMMAND dbus-binding-tool --prefix= --mode=glib-client --output=${CMAKE_CURRENT_SOURCE_DIR}/include/tapi/tapi-lib-proxy.h ${CMAKE_CURRENT_SOURCE_DIR}/src/tapi-lib.xml)

#ADD_LIBRARY(SLP-tapi_STATIC STATIC ${SRCS})
#TARGET_LINK_LIBRARIES(SLP-tapi_STATIC ${pkgs_LDFLAGS})
#SET_TARGET_PROPERTIES(SLP-tapi_STATIC PROPERTIES VERSION 0.0.0 SOVERSION 0 OUTPUT_NAME SLP-tapi)
#ADD_DEPENDENCIES(SLP-tapi_STATIC tapi-lib-proxy.h)

ADD_LIBRARY(SLP-tapi_SHARED SHARED ${SRCS})
TARGET_LINK_LIBRARIES(SLP-tapi_SHARED ${pkgs_LDFLAGS})
SET_TARGET_PROPERTIES(SLP-tapi_SHARED PROPERTIES VERSION 0.0.0 SOVERSION 0 OUTPUT_NAME SLP-tapi)
CREATE_LIBTOOL_FILE(SLP-tapi_SHARED /lib)

ADD_DEPENDENCIES(SLP-tapi_SHARED tapi-lib-proxy.h)

# pkgconfig file
SET(PREFIX ${CMAKE_INSTALL_PREFIX})
CONFIGURE_FILE(tapi.pc.in tapi.pc @ONLY)


### Install ###
#INSTALL(TARGETS SLP-tapi_STATIC SLP-tapi_SHARED DESTINATION lib)
#INSTALL(TARGETS SLP-tapi_STATIC SLP-tapi_SHARED DESTINATION lib COMPONENT Development)
#INSTALL(TARGETS SLP-tapi DESTINATION lib COMPONENT RuntimeLibraries)
INSTALL(TARGETS SLP-tapi_SHARED DESTINATION lib COMPONENT Runtime)

INSTALL(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/include/common DESTINATION include/telephony)
INSTALL(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/include/tapi DESTINATION include/telephony)
INSTALL(FILES ${CMAKE_CURRENT_BINARY_DIR}/tapi.pc DESTINATION lib/pkgconfig)

